using Emgu.CV;
using Emgu.CV.Structure;
using Face;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace emgu.cv.face.gui
{
    public partial class MainForm : Form
    {
        private string camera;
        private VideoCapture capture = null;
        private bool captureInProgress;
        private Emgu.CV.Image<Bgr, Byte> frame = null;
        private double threshold = 0.7;

        private Face.Detector detector = null;
        private Face.Aligner aligner = null;
        private Face.Recognizer recognizer = null;
        private Face.Assessor assessor = null;

        /// <summary>
        /// holds registered users
        /// key: registered id generated by seeta
        /// value: user name
        /// </summary>
        private Hashtable registeredUsers = null; 

        public MainForm()
        {
            InitializeComponent();

            CvInvoke.UseOpenCL = false;
            try
            {
                this.capture = new VideoCapture();
                //this.capture.ImageGrabbed += ProcessFrame;
                Application.Idle += new EventHandler(ProcessFrame);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            this.registeredUsers = new Hashtable();
            //this.frame = new Emgu.CV.Image<Bgr, Byte>();
        }


        private void ProcessFrame(object sender, EventArgs arg)
        {
            if (this.capture != null && this.capture.Ptr != IntPtr.Zero)
            {
                // show frame in image box
                this.frame = this.capture.QueryFrame().ToImage<Bgr, byte>();
                this.imageBox.Image = this.frame;

                // detect face
                Bitmap bmp = this.frame.ToBitmap();
                List<Rectangle> faces = this.detector.Detect(bmp);

                for(int i=0;i<faces.Count;i++)
                {
                    this.frame.Draw(faces[i], new Bgr(255,0,0), 1);
                }


                // align face
                List<PointF> points = this.aligner.Align(bmp, faces[0]);

                // recognition
                float similarity = 0;
                int identityIndex = this.recognizer.Identify(bmp, points, ref similarity);
                
                if(similarity > threshold)
                {


                    //CvInvoke.PutText(this.frame, "text", )
                }
                
            }
        }


        private void ReleaseData()
        {
            if(this.capture.IsOpened)
            {
                this.capture.Stop();
            }

            if (this.capture != null)
            {
                this.capture.Dispose();
            }

            if(this.frame != null)
            {
                this.frame.Dispose();
            }

            if(this.detector != null)
            {
                this.detector.Dispose();
            }

            if(this.aligner != null)
            {
                this.aligner.Dispose();
            }

            if(this.recognizer != null)
            {
                this.recognizer.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">user name</param>
        /// <param name="bmp"></param>
        /// <returns>error code</returns>
        /// 0: success
        /// 1: no faces detected
        /// 2: poor quality face
        /// 3: register fale
        public int RegisterOnePerson(string id, Bitmap bmp)
        {
            // detect faces
            List<Rectangle> faces = this.detector.Detect(bmp);
            if(faces.Count < 1)
            {
                return 1;
            }

            // sort faces by bounding box area, so that faces[0] is the largest one
            faces.Sort((x, y) => { return (x.Width * x.Height) > (y.Width * y.Height) ? 1 : -1; });

            // align face
            List<PointF> points = this.aligner.Align(bmp, faces[0]);

            // assert face quality
            if(this.assessor.Evaluate(bmp, faces[0], points) == 0)
            {
                return 2;
            }

            // register
            int idx = this.recognizer.Register(bmp, points);
            if(idx < 0)
            {
                return 3;
            }

            this.registeredUsers.Add(idx, id);
            return 0;

        }


        private void MainForm_Load(object sender, EventArgs e)
        {
            this.detector = new Detector(@"models\fd_2_00.dat");
            this.aligner = new Aligner(@"models\pd_2_00_pts5.dat");
            this.recognizer = new Recognizer(@"models\fr_2_10.dat");
            this.assessor = new Assessor();

            this.capture.Start();
        }

        private void btnRegister_Click(object sender, EventArgs e)
        {

        }
    }
}
