using Emgu.CV;
using Emgu.CV.Structure;
using Face;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace emgu.cv.face.gui
{
    public partial class MainForm : Form
    {
        private string camera;
        private VideoCapture capture = null;
        private bool captureInProgress;
        private Bitmap frame = null;
        private double threshold = 0.6;

        private Face.Detector detector = null;
        private Face.Aligner aligner = null;
        private Face.Recognizer recognizer = null;
        private Face.Assessor assessor = null;

        /// <summary>
        /// holds registered users
        /// key: registered id generated by seeta
        /// value: user name
        /// </summary>
        private Hashtable registeredUsers = null;

        /// <summary>
        /// holds users' attendance status
        /// key: registered id generated by seeta
        /// value: true: attended, false: absence
        /// </summary>
        private Hashtable userStatus = null;

        public MainForm()
        {
            InitializeComponent();

            CvInvoke.UseOpenCL = false;
            try
            {
                this.capture = new VideoCapture();
                //this.capture.ImageGrabbed += ProcessFrame;
                Application.Idle += new EventHandler(ProcessFrame);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            this.registeredUsers = new Hashtable();
            this.userStatus = new Hashtable();
        }


        private void ProcessFrame(object sender, EventArgs arg)
        {
            if (this.capture != null && this.capture.Ptr != IntPtr.Zero)
            {
                // emgu不支持中文，所以转为Bitmap用GDI+绘制文字。有人说GDI+绘制效率更高，不知道真假。
                this.frame = this.capture.QueryFrame().Bitmap;
                
                // detect face
                List<Rectangle> faces = this.detector.Detect(this.frame);

                if(faces.Count >= 1)
                {
                    Graphics g = Graphics.FromImage(this.frame);

                    for (int i = 0; i < faces.Count; i++)
                    {
                        // align face
                        List<PointF> points = this.aligner.Align(this.frame, faces[0]);

                        // recognition
                        float similarity = 0;
                        int identityIndex = this.recognizer.Identify(this.frame, points, ref similarity);

                        Color c = Color.Blue;
                        if (identityIndex != -1 && similarity > this.threshold)
                        {
                            // set attendance status
                            if (this.userStatus[identityIndex] == null)
                            {
                                this.userStatus.Add(identityIndex, true);
                            }
                            else
                            { 
                                if (bool.Parse(this.userStatus[identityIndex].ToString()) == false)
                                {
                                    this.userStatus[identityIndex] = true;
                                }
                                    
                            }

                            c = Color.Pink;

                            // draw user id
                            string id = this.registeredUsers[identityIndex].ToString();
                            this.DrawText(faces[i], id, g);
                            
                        }

                        // draw bounding box
                        this.DrawBoundingBox(faces[i], g, c);
                    }
                }

                
                // show this frame in image box whether faces are detected
                this.imageBox.Image = new Image<Bgr,byte>(this.frame);
            }
        }




        private void DrawText(Rectangle bbox, string text, Graphics g)
        {
            // calculate a suitable position of text
            int textSize = bbox.Width / 6; // 字体以像素为单位

            // calculate text size
            StringFormat sf = StringFormat.GenericTypographic;
            sf.FormatFlags |= StringFormatFlags.MeasureTrailingSpaces;

            Font font = new Font(new FontFamily("黑体"), textSize, GraphicsUnit.Pixel);
            SizeF s = g.MeasureString(text, font, 0, sf);

            Point textPosition = new Point();
            textPosition.X = (bbox.Width - s.Width) < 0 ? bbox.X : bbox.X + (int)((bbox.Width - s.Width) / 2);
            textPosition.Y = bbox.Y - s.Height < 0 ? bbox.Y + 2 : (int)(bbox.Y - s.Height);

            g.DrawString(text, font, new SolidBrush(Color.Green), textPosition);
        }


        private void DrawBoundingBox(Rectangle box, Graphics g, Color c)
        {
            g.DrawRectangle(new Pen(c), box);
        }


        private void ReleaseData()
        {
            if(this.capture.IsOpened)
            {
                this.capture.Stop();
            }

            if (this.capture != null)
            {
                this.capture.Dispose();
            }

            if(this.frame != null)
            {
                this.frame.Dispose();
            }

            if(this.detector != null)
            {
                this.detector.Dispose();
            }

            if(this.aligner != null)
            {
                this.aligner.Dispose();
            }

            if(this.recognizer != null)
            {
                this.recognizer.Dispose();
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">user name</param>
        /// <param name="bmp"></param>
        /// <returns>error code</returns>
        /// 0: success
        /// 1: no faces detected
        /// 2: poor quality face
        /// 3: register fale
        public int RegisterOnePerson(string id, Bitmap bmp)
        {
            // detect faces
            List<Rectangle> faces = this.detector.Detect(bmp);
            if(faces.Count < 1)
            {
                return 1;
            }

            // sort faces by bounding box area, so that faces[0] is the largest one
            faces.Sort((x, y) => { return (x.Width * x.Height) > (y.Width * y.Height) ? 1 : -1; });

            // align face
            List<PointF> points = this.aligner.Align(bmp, faces[0]);

            // assert face quality
            //if(this.assessor.Evaluate(bmp, faces[0], points) == 0)
            //{
            //    return 2;
            //}

            // register
            int idx = this.recognizer.Register(bmp, points);
            if(idx < 0)
            {
                return 3;
            }

            this.registeredUsers.Add(idx, id);
            
            return 0;

        }


        private void MainForm_Load(object sender, EventArgs e)
        {
            this.detector = new Detector(@"models\fd_2_00.dat");
            this.aligner = new Aligner(@"models\pd_2_00_pts5.dat");
            this.recognizer = new Recognizer(@"models\fr_2_10.dat");
            this.assessor = new Assessor();

            this.capture.Start();
        }

        private void btnRegister_Click(object sender, EventArgs e)
        {
            OpenFileDialog dlg = new OpenFileDialog();
            if(dlg.ShowDialog() == DialogResult.OK)
            {
                Bitmap bmp = (Bitmap)Bitmap.FromFile(dlg.FileName);

                this.RegisterOnePerson("赵尽忠", bmp);
            }
        }
    }
}
